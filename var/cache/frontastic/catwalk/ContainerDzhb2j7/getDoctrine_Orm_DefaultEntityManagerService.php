<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.orm.default_entity_manager' shared service.

$a = new \Doctrine\ORM\Configuration();

$b = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

$c = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()), [0 => (\dirname(__DIR__, 5).'/vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity'), 1 => (\dirname(__DIR__, 5).'/test/php/ApiCoreBundle/Domain/App')]);
$d = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver([(\dirname(__DIR__, 5).'/src/php/ApiCoreBundle/Resources/config/doctrine') => 'Frontastic\\Catwalk\\ApiCoreBundle\\Domain', (\dirname(__DIR__, 5).'/src/php/FrontendBundle/Resources/config/doctrine') => 'Frontastic\\Catwalk\\FrontendBundle\\Domain']);
$d->setGlobalBasename('mapping');

$b->addDriver($c, 'Gedmo\\Tree\\Entity');
$b->addDriver($c, 'Frontastic\\Catwalk\\ApiCoreBundle\\Domain\\App\\');
$b->addDriver($d, 'Frontastic\\Catwalk\\ApiCoreBundle\\Domain');
$b->addDriver($d, 'Frontastic\\Catwalk\\FrontendBundle\\Domain');

$a->setEntityNamespaces(['Gedmo' => 'Gedmo\\Tree\\Entity', 'FrontasticCatwalkApiCoreBundleAppTest' => 'Frontastic\\Catwalk\\ApiCoreBundle\\Domain\\App\\', 'FrontasticCatwalkApiCoreBundle' => 'Frontastic\\Catwalk\\ApiCoreBundle\\Domain', 'FrontasticCatwalkFrontendBundle' => 'Frontastic\\Catwalk\\FrontendBundle\\Domain']);
$a->setMetadataCacheImpl(new \Symfony\Component\Cache\DoctrineProvider(($this->privates['cache.doctrine.orm.default.metadata'] ?? ($this->privates['cache.doctrine.orm.default.metadata'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter()))));
$a->setQueryCacheImpl(new \Symfony\Component\Cache\DoctrineProvider(($this->privates['cache.doctrine.orm.default.query'] ?? ($this->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter()))));
$a->setResultCacheImpl(new \Symfony\Component\Cache\DoctrineProvider(($this->privates['cache.doctrine.orm.default.result'] ?? ($this->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter()))));
$a->setMetadataDriverImpl($b);
$a->setProxyDir(($this->targetDir.''.'/doctrine/orm/Proxies'));
$a->setProxyNamespace('Proxies');
$a->setAutoGenerateProxyClasses(false);
$a->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
$a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
$a->setNamingStrategy(new \Doctrine\ORM\Mapping\DefaultNamingStrategy());
$a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
$a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($this));
$a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(($this->privates['.service_locator.I3K77mT'] ?? ($this->privates['.service_locator.I3K77mT'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [], [])))));
$a->addCustomStringFunction('REGEXP', 'DoctrineExtensions\\Query\\Mysql\\Regexp');
$a->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\\Query\\Mysql\\Radians');
$a->addCustomNumericFunction('ACOS', 'DoctrineExtensions\\Query\\Mysql\\Acos');
$a->addCustomNumericFunction('COS', 'DoctrineExtensions\\Query\\Mysql\\Cos');
$a->addCustomNumericFunction('SIN', 'DoctrineExtensions\\Query\\Mysql\\Sin');
$a->addCustomNumericFunction('DEGREES', 'DoctrineExtensions\\Query\\Mysql\\Degrees');
$a->addFilter('undeleted', 'Frontastic\\Catwalk\\ApiCoreBundle\\Doctrine\\UndeletedFilter');

$this->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($this->services['doctrine.dbal.default_connection'] ?? $this->load('getDoctrine_Dbal_DefaultConnectionService.php')), $a);

(new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([0 => 'undeleted'], []))->configure($instance);

return $instance;
