<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.dbal.default_connection' shared service.

$a = new \Doctrine\DBAL\Configuration();
$a->setSchemaAssetsFilter(new \Doctrine\Bundle\DoctrineBundle\Dbal\SchemaAssetsFilterManager([0 => new \Doctrine\Bundle\DoctrineBundle\Dbal\BlacklistSchemaAssetFilter([0 => 'http_session'])]));
$b = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService.php', true],
], [
    'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
]));

$c = new \Gedmo\Tree\TreeListener();

$d = ($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService());

$c->setAnnotationReader($d);
$e = new \Gedmo\Timestampable\TimestampableListener();
$e->setAnnotationReader($d);

$b->addEventSubscriber($c);
$b->addEventSubscriber($e);
$b->addEventListener([0 => 'loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners');

return $this->services['doctrine.dbal.default_connection'] = (new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory([]))->createConnection(['driver' => 'pdo_mysql', 'host' => $this->getEnv('database_host'), 'port' => $this->getEnv('database_port'), 'dbname' => $this->getEnv('database_name'), 'user' => $this->getEnv('database_user'), 'password' => $this->getEnv('database_password'), 'charset' => 'utf8mb4', 'driverOptions' => [], 'defaultTableOptions' => ['charset' => 'utf8mb4', 'collate' => 'utf8mb4_unicode_ci']], $a, $b, []);
